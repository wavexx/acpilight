#!/usr/bin/env python
# xbacklight: control backlight brightness on linux using the sys filesystem
#             with a backward-compatibile user interface
# Copyright(c) 2016 by wave++ "Yuri D'Elia" <wavexx@thregr.org>
# -*- coding: utf-8 -*-
from __future__ import print_function, division

APP_DESC = "control backlight brightness"
SYS_PATH = "/sys/class/backlight"

import argparse
import os, sys
import time


def error(msg):
    print(sys.argv[0] + ": " + msg)

def get_controllers():
    return os.listdir(SYS_PATH)

def list_controllers(ctrls):
    for ctrl in ctrls:
        print(ctrl)

def clamp(v, vmin, vmax):
    return max(min(v, vmax), vmin)

class Controller(object):
    def __init__(self, ctrl):
        self._brightness_path = os.path.join(SYS_PATH, ctrl, "brightness")
        self._max_brightness = int(open(os.path.join(
            SYS_PATH, ctrl, "max_brightness")).read())

    def raw_brightness(self):
        return int(open(self._brightness_path).read())

    def brightness(self):
        return self.raw_brightness() * 100 / self._max_brightness

    def set_raw_brightness(self, b):
        open(self._brightness_path, "w").write(str(int(round(b))))

    def set_brightness(self, pc):
        self.set_raw_brightness(pc * self._max_brightness / 100)


def sweep_brightness(ctrl, current, target, steps, delay):
    sleep = (delay / 1000.) / steps
    for s in range(1, steps):
        pc = current + (target - current) * s / steps
        ctrl.set_brightness(pc)
        time.sleep(sleep)
    ctrl.set_brightness(target)


def main():
    ap = argparse.ArgumentParser(description=APP_DESC)
    g = ap.add_mutually_exclusive_group(required=True)
    g.add_argument("-list", action="store_true", help="List controllers")
    g.add_argument("-getf", action="store_true", help="Get fractional brightness")
    g.add_argument("-get", action="store_true", help="Get brightness")
    g.add_argument("-set", metavar="PERCENT", type=float, help="Set brightness")
    g.add_argument("-inc", metavar="PERCENT", type=float, help="Increase brightness")
    g.add_argument("-dec", metavar="PERCENT", type=float, help="Decrease brightness")
    g.add_argument('percentage', nargs="?", default=[], help="=<percentage> or +<percentage> or -<percentage> to set, increase or decrease brightness")
    ap.add_argument("-ctrl", help="Set controller to use")
    ap.add_argument("-time", metavar="MILLISECS", type=int,
                    default=200, help="Fading period (in milliseconds, default: 200)")
    ap.add_argument("-steps", type=int,
                    default=0, help="Fading steps (default: 0)")
    ap.add_argument("-display", help="Ignored")
    args = ap.parse_args()

    # list controllers
    ctrls = get_controllers()
    if args.list:
        list_controllers(ctrls)
        return 0

    # set current operating controller
    if args.ctrl is None:
        ctrl = Controller(ctrls[0])
    else:
        if args.ctrl not in ctrls:
            error("unknown controller '{}'".format(args.ctrl))
            return 1
        ctrl = Controller(args.ctrl)

    # perform the requested action
    if args.percentage:
        current = ctrl.brightness()
        arg = args.percentage
        if arg.startswith('=') and arg[1:].isdigit():
            target = int(arg[1:])
        elif arg.startswith('+') and arg[1:].isdigit():
            target = current + int(arg[1:])
        elif arg.startswith('-') and arg[1:].isdigit():
            target = current - int(arg[1:])
        else:
            error("Command unknown")
            return 1
        target = clamp(target, 0, 100)
        
        if current == target:
            pass
        elif args.steps < 1 or args.time < 1:
            ctrl.set_brightness(target)
        else:
            sweep_brightness(ctrl, current, target, args.steps, args.time)
    elif args.getf:
        print(ctrl.brightness())
    elif args.get:
        print(int(round(ctrl.brightness())))
    else:
        current = ctrl.brightness()
        if args.set is not None:
            target = args.set
        elif args.inc is not None:
            target = current + args.inc
        elif args.dec is not None:
            target = current - args.dec
        else:
            error("unknown command")
            return 1
        target = clamp(target, 0, 100)
        if current == target:
            pass
        elif args.steps < 1 or args.time < 1:
            ctrl.set_brightness(target)
        else:
            sweep_brightness(ctrl, current, target, args.steps, args.time)

    return 0


if __name__ == "__main__":
    sys.exit(main())
