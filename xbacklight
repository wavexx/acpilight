#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""xbacklight: control backlight and led brightness on linux using the sys
               filesystem with a backward-compatibile user interface

Copyright(c) 2016-2017 by wave++ "Yuri D'Elia" <wavexx@thregr.org>
Copyright(c) 2018 by "Aliaksei Urbanski" <mim@mim.pw>
"""

from __future__ import division, generators, print_function

import argparse
import os
import sys
import time

APP_DESC = "control backlight brightness"
SYS_PATH = ["/sys/class/backlight", "/sys/class/leds"]
ACTION_MAP = {'=': 'set', '+': 'inc', '-': 'dec'}
DEFAULT_DELAY = 200


class AcpilightError(Exception):
    pass


class Controller(object):
    def __init__(self, path):
        self._brightness_path = os.path.join(path, 'brightness')
        self._max_brightness_path = os.path.join(path, 'max_brightness')
        self._brightness = None
        self._max_brightness = None

    @staticmethod
    def _get_controllers():
        for path in SYS_PATH:
            if os.path.isdir(path):
                for name in os.listdir(path):
                    yield path, name

    @classmethod
    def get_names(cls):
        for path, name in cls._get_controllers():
            yield name

    @classmethod
    def get_controller(cls, controller_name):
        for path, name in cls._get_controllers():
            if controller_name is None or controller_name == name:
                return cls(os.path.join(path, name))

    @property
    def max_brightness(self):
        if self._max_brightness is None:
            with open(self._max_brightness_path) as max_brightness_file:
                self._max_brightness = int(max_brightness_file.read())
        return self._max_brightness

    def percent_to_brightness(self, percent):
        return int(round(percent * self.max_brightness / 100))

    @property
    def brightness(self):
        if self._brightness is None:
            with open(self._brightness_path) as brightness_file:
                self._brightness = int(brightness_file.read())
        return self._brightness

    @property
    def brightness_percent(self):
        return self.brightness * 100 / self.max_brightness

    def set_brightness(self, raw_brightness):
        if self.brightness != raw_brightness:
            with open(self._brightness_path, 'w') as brightness_file:
                brightness_file.write(str(raw_brightness))
            self._brightness = raw_brightness

    def set_brightness_percent(self, percent):
        self.set_brightness(self.percent_to_brightness(percent))

    def sweep_brightness(self, target_brightness, steps, delay):
        current_brightness = self.brightness
        delta = target_brightness - current_brightness
        max_steps = abs(delta)
        if steps is None or steps > max_steps:
            steps = max_steps
        if steps:
            sleep_interval = (delay / 1000) / steps
            step_value = (target_brightness - current_brightness) / steps
            for _ in range(steps - 1):
                current_brightness += step_value
                self.set_brightness(int(round(current_brightness)))
                time.sleep(sleep_interval)
        self.set_brightness(target_brightness)

    def sweep_brightness_percent(self, target_percent, steps, delay):
        target_brightness = self.percent_to_brightness(target_percent)
        self.sweep_brightness(target_brightness, steps, delay)


class Percent(object):
    def __init__(self, arg):
        action = arg and ACTION_MAP.get(arg[0])
        if action:
            value = arg[1:]
        else:
            action = 'set'
            value = arg

        if not value:
            raise AcpilightError('PERCENT value is empty')

        try:
            self.value = float(value)
        except ValueError:
            raise AcpilightError('PERCENT value is not valid')

        self.action = action

    def update_args(self, args):
        setattr(args, self.action, self.value)


def get_args():
    parser = argparse.ArgumentParser(description=APP_DESC, add_help=False)
    parser.add_argument("-ctrl", help="Set controller to use")
    parser.add_argument("-display", help="Ignored")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-h", "-help", action="help",
                       help="Show this help and exit")
    group.add_argument("-list", action="store_true",
                       help="List controllers")
    group.add_argument("-getf", action="store_true",
                       help="Get fractional brightness")
    group.add_argument("-get", action="store_true",
                       help="Get brightness")
    group.add_argument("-set", metavar="PERCENT", type=float,
                       help="Set brightness")
    group.add_argument("-inc", metavar="PERCENT", type=float,
                       help="Increase brightness")
    group.add_argument("-dec", metavar="PERCENT", type=float,
                       help="Decrease brightness")
    group.add_argument("percent", metavar="PERCENT", type=Percent, nargs='?',
                       help="[=+-]PERCENT to set, increase, decrease "
                            "brightness")

    group = parser.add_mutually_exclusive_group()
    group.add_argument("-fps", type=int, help="Fading frame rate (optional)")
    group.add_argument("-steps", type=int, help="Fading steps (optional)")
    parser.add_argument("-time", metavar="MILLISECS", type=int,
                        help="Fading period (in milliseconds, "
                             "default: {})".format(DEFAULT_DELAY))

    return parser.parse_args()


def main():
    args = get_args()

    if args.list:
        for name in Controller.get_names():
            print(name)
        return 0

    # set current operating controller
    controller_name = args.ctrl
    controller = Controller.get_controller(controller_name)
    if not controller:
        raise AcpilightError('unknown controller "{}"'.format(controller_name)
                             if controller_name else
                             'no controllers were found')

    # perform the requested action
    if args.getf:
        print(controller.brightness_percent)
    elif args.get:
        print(int(round(controller.brightness_percent)))
    else:
        if args.percent:
            # uniform arguments
            args.percent.update_args(args)

        if args.set is not None:
            target_percent = args.set
        elif args.inc is not None:
            target_percent = controller.brightness_percent + args.inc
        elif args.dec is not None:
            target_percent = controller.brightness_percent - args.dec
        else:
            raise AcpilightError('action was not defined')

        # clamp target
        if target_percent > 100:
            target_percent = 100
        elif target_percent < 0:
            target_percent = 0

        fps = args.fps
        steps = args.steps
        delay = args.time
        if not (fps or steps or delay):
            controller.set_brightness_percent(target_percent)
        else:
            if delay is None:
                delay = DEFAULT_DELAY
            if fps:
                steps = int((args.fps / 1000) * delay)
            controller.sweep_brightness_percent(target_percent, steps, delay)

    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except (AcpilightError, IOError) as error:
        sys.stderr.write('{}: {}\n'.format(sys.argv[0], error))
        sys.exit(1)
